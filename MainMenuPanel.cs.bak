using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;
using MQ3VRApp.Media;
using MQ3VRApp.Player;

namespace MQ3VRApp.UI
{
    /// <summary>
    /// VR„É°„Ç§„É≥„É°„Éã„É•„Éº„Éë„Éç„É´
    /// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰∏ªË¶ÅÊ©üËÉΩ„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÇíÊèê‰æõ
    /// </summary>
    public class MainMenuPanel : VRMediaPanel
    {
        [Header("Main Menu Sections")]
        [SerializeField] private Transform mediaLibrarySection;
        [SerializeField] private Transform playbackControlSection;
        [SerializeField] private Transform settingsSection;
        [SerializeField] private Transform infoSection;
        
        [Header("Menu References")]
        [SerializeField] private MediaController mediaController;
        [SerializeField] private VRPlayerController playerController;
        
        [Header("UI Elements")]
        [SerializeField] private TextMeshProUGUI titleText;
        [SerializeField] private TextMeshProUGUI statusText;
        [SerializeField] private Button mediaLibraryButton;
        [SerializeField] private Button settingsButton;
        [SerializeField] private Button exitButton;
        
        [Header("Media Library UI")]
        [SerializeField] private ScrollRect mediaScrollView;
        [SerializeField] private Transform mediaButtonContainer;
        [SerializeField] private GameObject mediaButtonPrefab;
        
        [Header("Playback Controls")]
        [SerializeField] private Button playButton;
        [SerializeField] private Button pauseButton;
        [SerializeField] private Button nextButton;
        [SerializeField] private Button previousButton;
        [SerializeField] private Button shuffleButton;
        [SerializeField] private Button repeatButton;
        
        [Header("Settings Controls")]
        [SerializeField] private Slider rotationSpeedSlider;
        [SerializeField] private Toggle autoRotationToggle;
        [SerializeField] private Toggle autoPlayToggle;
        [SerializeField] private Slider volumeSlider;
        
        [Header("Visual Settings")]
        [SerializeField] private Color selectedButtonColor = new Color(0.2f, 0.8f, 0.4f, 0.9f);
        [SerializeField] private Color normalButtonColor = new Color(0.2f, 0.2f, 0.2f, 0.8f);
        
        private List<Button> mediaButtons = new List<Button>();
        private List<PanoramaManager.MediaContent> currentMediaList;
        private PanoramaManager.MediaContent selectedMedia;
        private MenuState currentMenuState = MenuState.Main;
        
        public enum MenuState
        {
            Main,
            MediaLibrary,
            PlaybackControls,
            Settings,
            Info
        }
        
        protected override void Awake()
        {
            base.Awake();
            InitializeMainMenu();
        }
        
        private void Start()
        {
            SetupMenuNavigation();
            LoadMediaLibrary();
            UpdateMenuState(MenuState.Main);
        }
        
        private void OnEnable()
        {
            // „Ç§„Éô„É≥„Éà„ÅÆÁôªÈå≤
            if (mediaController != null)
            {
                mediaController.OnMediaChanged += OnMediaChanged;
                mediaController.OnPlaybackStarted += OnPlaybackStarted;
                mediaController.OnPlaybackStopped += OnPlaybackStopped;
            }
        }
        
        private void OnDisable()
        {
            // „Ç§„Éô„É≥„Éà„ÅÆËß£Èô§
            if (mediaController != null)
            {
                mediaController.OnMediaChanged -= OnMediaChanged;
                mediaController.OnPlaybackStarted -= OnPlaybackStarted;
                mediaController.OnPlaybackStopped -= OnPlaybackStopped;
            }
        }
        
        private void InitializeMainMenu()
        {
            // MediaController„ÅÆÂèñÂæó
            if (mediaController == null)
            {
                mediaController = FindObjectOfType<MediaController>();
            }
            
            // VRPlayerController„ÅÆÂèñÂæó
            if (playerController == null)
            {
                playerController = FindObjectOfType<VRPlayerController>();
            }
            
            // „Çø„Ç§„Éà„É´„ÉÜ„Ç≠„Çπ„Éà„ÅÆË®≠ÂÆö
            if (titleText != null)
            {
                titleText.text = "VR Media Viewer";
            }
            
            UnityEngine.Debug.Log("MainMenuPanel initialized");
        }
        
        private void SetupMenuNavigation()
        {
            // „É°„Ç§„É≥„É°„Éã„É•„Éº„Éú„Çø„É≥„ÅÆË®≠ÂÆö
            if (mediaLibraryButton != null)
            {
                mediaLibraryButton.onClick.AddListener(() => UpdateMenuState(MenuState.MediaLibrary));
            }
            
            if (settingsButton != null)
            {
                settingsButton.onClick.AddListener(() => UpdateMenuState(MenuState.Settings));
            }
            
            if (exitButton != null)
            {
                exitButton.onClick.AddListener(OnExitApplication);
            }
            
            // ÂÜçÁîüÂà∂Âæ°„Éú„Çø„É≥„ÅÆË®≠ÂÆö
            SetupPlaybackControls();
            
            // Ë®≠ÂÆö„Ç≥„É≥„Éà„É≠„Éº„É´„ÅÆË®≠ÂÆö
            SetupSettingsControls();
        }
        
        private void SetupPlaybackControls()
        {
            if (playButton != null)
            {
                playButton.onClick.AddListener(() => {
                    if (selectedMedia != null && mediaController != null)
                    {
                        mediaController.LoadMedia(selectedMedia);
                    }
                });
            }
            
            if (pauseButton != null)
            {
                pauseButton.onClick.AddListener(() => {
                    mediaController?.TogglePlayback();
                });
            }
            
            if (nextButton != null)
            {
                nextButton.onClick.AddListener(() => {
                    mediaController?.PlayNext();
                });
            }
            
            if (previousButton != null)
            {
                previousButton.onClick.AddListener(() => {
                    mediaController?.PlayPrevious();
                });
            }
            
            if (shuffleButton != null)
            {
                shuffleButton.onClick.AddListener(() => {
                    mediaController?.ToggleShuffle();
                    UpdateShuffleButtonState();
                });
            }
            
            if (repeatButton != null)
            {
                repeatButton.onClick.AddListener(() => {
                    mediaController?.ToggleRepeat();
                    UpdateRepeatButtonState();
                });
            }
        }
        
        private void SetupSettingsControls()
        {
            // Ëá™ÂãïÂõûËª¢Ë®≠ÂÆö
            if (autoRotationToggle != null)
            {
                autoRotationToggle.onValueChanged.AddListener((value) => {
                    mediaController?.ToggleAutoRotation();
                });
            }
            
            // Ëá™ÂãïÂÜçÁîüË®≠ÂÆö
            if (autoPlayToggle != null)
            {
                autoPlayToggle.onValueChanged.AddListener((value) => {
                    mediaController?.ToggleAutoPlay();
                });
            }
            
            // ÂõûËª¢ÈÄüÂ∫¶Ë®≠ÂÆö
            if (rotationSpeedSlider != null)
            {
                rotationSpeedSlider.onValueChanged.AddListener((value) => {
                    // PanoramaManager„ÅÆÂõûËª¢ÈÄüÂ∫¶„ÇíË™øÊï¥
                    UnityEngine.Debug.Log($"Rotation speed changed: {value}");
                });
            }
            
            // „Éú„É™„É•„Éº„É†Ë®≠ÂÆö
            if (volumeSlider != null)
            {
                volumeSlider.onValueChanged.AddListener((value) => {
                    AudioListener.volume = value;
                });
                volumeSlider.value = AudioListener.volume;
            }
        }
        
        private void LoadMediaLibrary()
        {
            if (mediaController == null || mediaButtonContainer == null) return;
            
            // Êó¢Â≠ò„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„Ç¢
            ClearMediaButtons();
            
            // „É°„Éá„Ç£„Ç¢„É™„Çπ„Éà„ÇíÂèñÂæó
            currentMediaList = mediaController.GetCurrentPlaylist();
            
            // „É°„Éá„Ç£„Ç¢„Éú„Çø„É≥„ÇíÁîüÊàê
            foreach (var media in currentMediaList)
            {
                CreateMediaButton(media);
            }
            
            UpdateStatusText($"Loaded {currentMediaList.Count} media items");
        }
        
        private void CreateMediaButton(PanoramaManager.MediaContent media)
        {
            if (mediaButtonPrefab == null || mediaButtonContainer == null) return;
            
            GameObject buttonObject = Instantiate(mediaButtonPrefab, mediaButtonContainer);
            Button button = buttonObject.GetComponent<Button>();
            TextMeshProUGUI buttonText = buttonObject.GetComponentInChildren<TextMeshProUGUI>();
            
            if (button != null && buttonText != null)
            {
                // „Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆË®≠ÂÆö
                string mediaTypeIcon = media.type == PanoramaManager.MediaType.Video ? "üé•" : "üñºÔ∏è";
                buttonText.text = $"{mediaTypeIcon} {media.name}";
                
                // „Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÅÆË®≠ÂÆö
                button.onClick.AddListener(() => OnMediaButtonClicked(media, button));
                
                // UIButtonInteractable„ÅÆË®≠ÂÆö
                UIButtonInteractable buttonInteractable = buttonObject.GetComponent<UIButtonInteractable>();
                if (buttonInteractable == null)
                {
                    buttonInteractable = buttonObject.AddComponent<UIButtonInteractable>();
                }
                
                mediaButtons.Add(button);
            }
        }
        
        private void OnMediaButtonClicked(PanoramaManager.MediaContent media, Button clickedButton)
        {
            // ÈÅ∏Êäû„Åï„Çå„Åü„É°„Éá„Ç£„Ç¢„ÇíË®≠ÂÆö
            selectedMedia = media;
            
            // „Éú„Çø„É≥„ÅÆËâ≤„ÇíÊõ¥Êñ∞
            UpdateMediaButtonColors(clickedButton);
            
            // „É°„Éá„Ç£„Ç¢„ÇíË™≠„ÅøËæº„Åø
            if (mediaController != null)
            {
                mediaController.LoadMedia(media);
            }
            
            // ÂÜçÁîüÂà∂Âæ°„É°„Éã„É•„Éº„Å´Âàá„ÇäÊõø„Åà
            UpdateMenuState(MenuState.PlaybackControls);
            
            UpdateStatusText($"Selected: {media.name}");
        }
        
        private void UpdateMediaButtonColors(Button selectedButton)
        {
            foreach (var button in mediaButtons)
            {
                Image buttonImage = button.GetComponent<Image>();
                if (buttonImage != null)
                {
                    buttonImage.color = (button == selectedButton) ? selectedButtonColor : normalButtonColor;
                }
            }
        }
        
        private void ClearMediaButtons()
        {
            foreach (var button in mediaButtons)
            {
                if (button != null)
                {
                    DestroyImmediate(button.gameObject);
                }
            }
            mediaButtons.Clear();
        }
        
        private void UpdateMenuState(MenuState newState)
        {
            currentMenuState = newState;
            
            // ÂÖ®„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÈùûË°®Á§∫
            SetSectionActive(mediaLibrarySection, false);
            SetSectionActive(playbackControlSection, false);
            SetSectionActive(settingsSection, false);
            SetSectionActive(infoSection, false);
            
            // ÂØæË±°„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫
            switch (newState)
            {
                case MenuState.Main:
                    UpdateStatusText("Welcome to VR Media Viewer");
                    break;
                    
                case MenuState.MediaLibrary:
                    SetSectionActive(mediaLibrarySection, true);
                    LoadMediaLibrary();
                    break;
                    
                case MenuState.PlaybackControls:
                    SetSectionActive(playbackControlSection, true);
                    UpdatePlaybackControls();
                    break;
                    
                case MenuState.Settings:
                    SetSectionActive(settingsSection, true);
                    UpdateStatusText("Settings");
                    break;
                    
                case MenuState.Info:
                    SetSectionActive(infoSection, true);
                    UpdateStatusText("Information");
                    break;
            }
        }
        
        private void SetSectionActive(Transform section, bool active)
        {
            if (section != null)
            {
                section.gameObject.SetActive(active);
            }
        }
        
        private void UpdatePlaybackControls()
        {
            if (mediaController == null) return;
            
            MediaController.PlaylistInfo playlistInfo = mediaController.GetPlaylistInfo();
            
            // „Éú„Çø„É≥„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            UpdateShuffleButtonState();
            UpdateRepeatButtonState();
            
            // ÁèæÂú®„ÅÆ„É°„Éá„Ç£„Ç¢ÊÉÖÂ†±„ÇíË°®Á§∫
            PanoramaManager.MediaContent currentMedia = mediaController.GetCurrentMedia();
            if (currentMedia != null)
            {
                UpdateStatusText($"Playing: {currentMedia.name} ({playlistInfo.currentIndex + 1}/{playlistInfo.totalItems})");
            }
        }
        
        private void UpdateShuffleButtonState()
        {
            if (shuffleButton != null && mediaController != null)
            {
                MediaController.PlaylistInfo info = mediaController.GetPlaylistInfo();
                Image buttonImage = shuffleButton.GetComponent<Image>();
                if (buttonImage != null)
                {
                    buttonImage.color = info.shuffleEnabled ? selectedButtonColor : normalButtonColor;
                }
            }
        }
        
        private void UpdateRepeatButtonState()
        {
            if (repeatButton != null && mediaController != null)
            {
                MediaController.PlaylistInfo info = mediaController.GetPlaylistInfo();
                Image buttonImage = repeatButton.GetComponent<Image>();
                if (buttonImage != null)
                {
                    buttonImage.color = info.repeatEnabled ? selectedButtonColor : normalButtonColor;
                }
            }
        }
        
        private void UpdateStatusText(string message)
        {
            if (statusText != null)
            {
                statusText.text = message;
            }
        }
        
        private void OnMediaChanged(PanoramaManager.MediaContent content)
        {
            selectedMedia = content;
            UpdateStatusText($"Now playing: {content.name}");
        }
        
        private void OnPlaybackStarted(PanoramaManager.MediaContent content)
        {
            UpdateStatusText($"Started: {content.name}");
        }
        
        private void OnPlaybackStopped(PanoramaManager.MediaContent content)
        {
            UpdateStatusText("Playback stopped");
        }
        
        private void OnExitApplication()
        {
#if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
#else
            Application.Quit();
#endif
        }
        
        /// <summary>
        /// „É°„Ç§„É≥„É°„Éã„É•„Éº„Å´Êàª„Çã
        /// </summary>
        public void ReturnToMainMenu()
        {
            UpdateMenuState(MenuState.Main);
        }
        
        /// <summary>
        /// „É°„Éá„Ç£„Ç¢„É©„Ç§„Éñ„É©„É™„ÇíÂÜçË™≠„ÅøËæº„Åø
        /// </summary>
        public void RefreshMediaLibrary()
        {
            LoadMediaLibrary();
        }
        
        /// <summary>
        /// ÁèæÂú®„ÅÆ„É°„Éã„É•„ÉºÁä∂ÊÖã„ÇíÂèñÂæó
        /// </summary>
        public MenuState GetCurrentMenuState()
        {
            return currentMenuState;
        }
        
        /// <summary>
        /// ÁâπÂÆö„ÅÆ„É°„Éã„É•„Éº„Çª„ÇØ„Ç∑„Éß„É≥„Å´Áõ¥Êé•ÁßªÂãï
        /// </summary>
        public void NavigateToSection(MenuState targetState)
        {
            UpdateMenuState(targetState);
        }
    }
}