using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;
using UnityEngine.XR;
using System.Collections.Generic;

namespace MQ3VRApp
{
    /// <summary>
    /// ハンドトラッキングとインタラクションを制御するクラス
    /// </summary>
    public class HandInteractionController : MonoBehaviour
    {
        public enum HandType
        {
            Left,
            Right
        }

        [Header("Hand Settings")]
        [SerializeField] private HandType handType = HandType.Right;
        [SerializeField] private float pinchThreshold = 0.7f;
        [SerializeField] private float grabRadius = 0.1f;
        
        [Header("Visual Feedback")]
        [SerializeField] private GameObject handVisualPrefab;
        [SerializeField] private Material defaultHandMaterial;
        [SerializeField] private Material interactingHandMaterial;
        
        [Header("Interaction")]
        [SerializeField] private LayerMask grabbableLayer = -1;
        [SerializeField] private float grabForce = 500f;
        
        private UnityEngine.XR.Interaction.Toolkit.Interactors.XRBaseInputInteractor xrController;
        private GameObject handVisual;
        private MeshRenderer handRenderer;
        private bool isPinching = false;
        private bool wasPickedUp = false;
        private GameObject currentGrabbedObject = null;
        private Rigidbody grabbedRigidbody = null;
        
        
        // インタラクションイベント
        public delegate void HandInteractionEvent(GameObject target);
        public event HandInteractionEvent OnGrabStart;
        public event HandInteractionEvent OnGrabEnd;
        public event HandInteractionEvent OnHoverStart;
        public event HandInteractionEvent OnHoverEnd;
        
        private GameObject hoveredObject = null;

        private void Start()
        {
            SetupHandVisual();
            SetupXRController();
        }

        private void SetupHandVisual()
        {
            if (handVisualPrefab != null)
            {
                handVisual = Instantiate(handVisualPrefab, transform);
                handRenderer = handVisual.GetComponent<MeshRenderer>();
                
                if (handRenderer != null && defaultHandMaterial != null)
                {
                    handRenderer.material = defaultHandMaterial;
                }
            }
        }

        private void SetupXRController()
        {
            // XRControllerの取得
            xrController = GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactors.XRBaseInputInteractor>();
            
            if (xrController != null)
            {
                Debug.Log($"{handType} hand controller initialized");
            }
            else
            {
                Debug.LogWarning("XRController not found. Hand tracking may not be available.");
            }
        }

        private void Update()
        {
            if (xrController == null) return;
            
            UpdateControllerInput();
            UpdateInteraction();
            UpdateVisualFeedback();
        }

        private void UpdateControllerInput()
        {
            // XR Input Systemを使用したgrip値の取得（簡易実装）
            bool isGripping = false;
            
            // 基本的なマウス/キーボードでのテスト用入力
            if (Input.GetMouseButton(0) || Input.GetKey(KeyCode.Space))
            {
                isGripping = true;
            }
            
            isPinching = isGripping;
            
            if (isPinching && !wasPickedUp)
            {
                TryGrabObject();
                wasPickedUp = true;
            }
            else if (!isPinching && wasPickedUp)
            {
                ReleaseObject();
                wasPickedUp = false;
            }
        }

        private void UpdateInteraction()
        {
            // コントローラーの位置を使用してホバー検出
            Vector3 controllerPosition = transform.position;
            
            // ホバー検出
            Collider[] colliders = Physics.OverlapSphere(controllerPosition, grabRadius, grabbableLayer);
            
            GameObject nearestObject = null;
            float nearestDistance = float.MaxValue;
            
            foreach (var collider in colliders)
            {
                if (collider.CompareTag("Grabbable"))
                {
                    float distance = Vector3.Distance(controllerPosition, collider.transform.position);
                    if (distance < nearestDistance)
                    {
                        nearestDistance = distance;
                        nearestObject = collider.gameObject;
                    }
                }
            }
            
            // ホバーイベントの処理
            if (nearestObject != hoveredObject)
            {
                if (hoveredObject != null)
                {
                    OnHoverEnd?.Invoke(hoveredObject);
                }
                
                hoveredObject = nearestObject;
                
                if (hoveredObject != null)
                {
                    OnHoverStart?.Invoke(hoveredObject);
                }
            }
        }

        private void TryGrabObject()
        {
            if (hoveredObject != null && currentGrabbedObject == null)
            {
                currentGrabbedObject = hoveredObject;
                grabbedRigidbody = currentGrabbedObject.GetComponent<Rigidbody>();
                
                if (grabbedRigidbody != null)
                {
                    grabbedRigidbody.useGravity = false;
                    grabbedRigidbody.drag = 10f;
                }
                
                // Grabbableコンポーネントの処理
                var grabbable = currentGrabbedObject.GetComponent<GrabbableObject>();
                if (grabbable != null)
                {
                    grabbable.OnGrab(this);
                }
                
                OnGrabStart?.Invoke(currentGrabbedObject);
                Debug.Log($"Grabbed object: {currentGrabbedObject.name}");
            }
        }

        private void ReleaseObject()
        {
            if (currentGrabbedObject != null)
            {
                if (grabbedRigidbody != null)
                {
                    grabbedRigidbody.useGravity = true;
                    grabbedRigidbody.drag = 1f;
                    
                    // コントローラーの速度を物体に適用（簡易実装）
                    Vector3 velocity = (transform.position - transform.position) / Time.deltaTime;
                    grabbedRigidbody.velocity = velocity;
                }
                
                // Grabbableコンポーネントの処理
                var grabbable = currentGrabbedObject.GetComponent<GrabbableObject>();
                if (grabbable != null)
                {
                    grabbable.OnRelease();
                }
                
                OnGrabEnd?.Invoke(currentGrabbedObject);
                Debug.Log($"Released object: {currentGrabbedObject.name}");
                
                currentGrabbedObject = null;
                grabbedRigidbody = null;
            }
        }

        private void FixedUpdate()
        {
            // 掴んでいるオブジェクトをコントローラーに追従させる
            if (currentGrabbedObject != null && grabbedRigidbody != null)
            {
                Vector3 targetPosition = transform.position;
                Vector3 force = (targetPosition - grabbedRigidbody.position) * grabForce;
                grabbedRigidbody.AddForce(force, ForceMode.Force);
            }
        }

        private void UpdateVisualFeedback()
        {
            if (handRenderer == null) return;
            
            // インタラクション状態に応じて手のマテリアルを変更
            if (isPinching && interactingHandMaterial != null)
            {
                handRenderer.material = interactingHandMaterial;
            }
            else if (defaultHandMaterial != null)
            {
                handRenderer.material = defaultHandMaterial;
            }
        }

        public bool IsPinching()
        {
            return isPinching;
        }

        public GameObject GetGrabbedObject()
        {
            return currentGrabbedObject;
        }

        private void OnDrawGizmosSelected()
        {
            // デバッグ用のギズモ表示
            Gizmos.color = isPinching ? Color.green : Color.yellow;
            Gizmos.DrawWireSphere(transform.position, grabRadius);
        }
    }

}
